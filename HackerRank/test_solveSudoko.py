import unittest
import solveSudoko


class TestSolveSudoko(unittest.TestCase):
    def test_rows_one_missing(self):
        a = [[5, 7, 0, 4, 3, 6, 8, 1, 2],  # 9
             [6, 0, 3, 1, 8, 2, 5, 7, 9],  # 4
             [1, 2, 0, 9, 5, 7, 6, 4, 3],  # 8
             [4, 5, 7, 0, 2, 1, 9, 8, 6],  # 3
             [2, 9, 6, 7, 0, 8, 1, 3, 5],  # 4
             [3, 8, 1, 6, 9, 0, 4, 2, 7],  # 5
             [9, 3, 5, 8, 7, 4, 0, 6, 1],  # 2
             [7, 1, 4, 2, 6, 9, 3, 0, 8],  # 5
             [8, 6, 2, 5, 1, 3, 0, 9, 4]]  # 7

        res = [[5, 7, 9, 4, 3, 6, 8, 1, 2],
               [6, 4, 3, 1, 8, 2, 5, 7, 9],
               [1, 2, 8, 9, 5, 7, 6, 4, 3],
               [4, 5, 7, 3, 2, 1, 9, 8, 6],
               [2, 9, 6, 7, 4, 8, 1, 3, 5],
               [3, 8, 1, 6, 9, 5, 4, 2, 7],
               [9, 3, 5, 8, 7, 4, 2, 6, 1],
               [7, 1, 4, 2, 6, 9, 3, 5, 8],
               [8, 6, 2, 5, 1, 3, 7, 9, 4]]
        self.assertEqual(solveSudoko.solve_sudoko(a), res)

    def test_cols_one_missing(self):
        a = [[5, 7, 0, 4, 3, 6, 8, 1, 2],  # 9
             [6, 0, 3, 1, 8, 2, 5, 7, 9],  # 4
             [1, 2, 8, 9, 5, 7, 6, 4, 0],  # 3
             [4, 5, 7, 0, 2, 1, 9, 8, 6],  # 3
             [2, 9, 6, 7, 0, 8, 1, 3, 5],  # 4
             [3, 8, 1, 6, 9, 0, 4, 2, 7],  # 5
             [0, 3, 5, 8, 7, 4, 2, 6, 1],  # 9
             [7, 1, 4, 2, 6, 9, 3, 0, 8],  # 5
             [8, 6, 2, 5, 1, 3, 0, 9, 4]]  # 7

        res = [[5, 7, 9, 4, 3, 6, 8, 1, 2],
               [6, 4, 3, 1, 8, 2, 5, 7, 9],
               [1, 2, 8, 9, 5, 7, 6, 4, 3],
               [4, 5, 7, 3, 2, 1, 9, 8, 6],
               [2, 9, 6, 7, 4, 8, 1, 3, 5],
               [3, 8, 1, 6, 9, 5, 4, 2, 7],
               [9, 3, 5, 8, 7, 4, 2, 6, 1],
               [7, 1, 4, 2, 6, 9, 3, 5, 8],
               [8, 6, 2, 5, 1, 3, 7, 9, 4]]
        self.assertEqual(solveSudoko.solve_sudoko(a), res)

    def test_square_one_missing(self):
        a = [[5, 7, 9, 4, 3, 6, 8, 1, 2],
             [6, 0, 3, 1, 0, 2, 5, 7, 0],  # 4, 8, 9
             [1, 2, 8, 9, 5, 7, 6, 4, 3],
             [4, 5, 7, 0, 2, 1, 9, 8, 6],  # 3
             [2, 0, 6, 7, 4, 8, 1, 3, 0],  # 9, 5
             [3, 8, 1, 6, 9, 5, 4, 2, 7],
             [0, 3, 5, 8, 7, 4, 2, 6, 1],  # 9
             [7, 1, 4, 2, 0, 9, 3, 5, 8],  # 6
             [8, 6, 2, 5, 1, 3, 0, 9, 4]]  # 7

        res = [[5, 7, 9, 4, 3, 6, 8, 1, 2],
               [6, 4, 3, 1, 8, 2, 5, 7, 9],
               [1, 2, 8, 9, 5, 7, 6, 4, 3],
               [4, 5, 7, 3, 2, 1, 9, 8, 6],
               [2, 9, 6, 7, 4, 8, 1, 3, 5],
               [3, 8, 1, 6, 9, 5, 4, 2, 7],
               [9, 3, 5, 8, 7, 4, 2, 6, 1],
               [7, 1, 4, 2, 6, 9, 3, 5, 8],
               [8, 6, 2, 5, 1, 3, 7, 9, 4]]
        self.assertEqual(solveSudoko.solve_sudoko(a), res)

    def test_actual_problem(self):
        a = [[7, 0, 3, 4, 5, 0, 9, 0, 6],
             [0, 6, 0, 0, 3, 0, 0, 0, 0],
             [0, 0, 0, 9, 0, 0, 0, 7, 2],
             [0, 0, 1, 0, 7, 8, 0, 4, 9],
             [0, 7, 8, 0, 0, 0, 1, 6, 0],
             [4, 2, 0, 1, 9, 0, 8, 0, 0],
             [3, 8, 0, 0, 0, 1, 0, 0, 0],
             [0, 0, 0, 0, 6, 0, 0, 3, 0],
             [6, 0, 5, 0, 8, 4, 7, 0, 1]]

        res = [[7, 1, 3, 4, 5, 2, 9, 8, 6],
               [2, 6, 9, 8, 3, 7, 4, 1, 5],
               [8, 5, 4, 9, 1, 6, 3, 7, 2],
               [5, 3, 1, 6, 7, 8, 2, 4, 9],
               [9, 7, 8, 2, 4, 5, 1, 6, 3],
               [4, 2, 6, 1, 9, 3, 8, 5, 7],
               [3, 8, 7, 5, 2, 1, 6, 9, 4],
               [1, 4, 2, 7, 6, 9, 5, 3, 8],
               [6, 9, 5, 3, 8, 4, 7, 2, 1]]

        self.maxDiff = None
        self.assertEqual(solveSudoko.solve_sudoko(a), res)


if __name__ == '__main__':
    unittest.main()
